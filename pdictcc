#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2012 by Michael Markert
#
# Author: Michael Markert <markert.michael@googlemail.com>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program ; see the file COPYING.  If not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# PDictCC is a tool for offline dictionary lookup based on dict.cc databases
# that tries to be a compatible replacement of Tassilo Horn's RDictCC:
# http://www.tsdh.de/cgi-bin/wiki.pl/RDictCc
from __future__ import print_function, unicode_literals

import codecs
import gdbm
import json
import os
import re
import sys
from collections import defaultdict
from textwrap import dedent, wrap


__version__ = ('0', '9')
ENCODING = 'utf-8'


# Data representation

class DBException(Exception):
    """Signal that a DB related exception happened."""
    pass


class DB(object):
    """
    Gdbm wrapper that tries to cover the deficiencies of gdbm database
    objects.

    DB is a context manager that opens its database on entry and closes it on
    exit.

    DB is an iterator that returns key value pairs if it is iterated on (DB
    needs to be opened).
    """
    databases = [('a', 'A => B'), ('b', 'B => A')]
    FILE_SCHEME = 'dict_{0}.dbm'
    LANG_DIR_KEY = '__dictcc_lang_dir'
    TRANSCRIPTONS_KEY = '__dictcc_transcriptions'

    def __init__(self, lang, importing=False):
        """
        :param lang: language identifier, db file path is constructed with it
        :type lang: unicode
        :param importing: flag that indicates if DB is used for importing
        :type importing: bool
        """
        self.path = os.path.join(DB.DICT_DIR, DB.FILE_SCHEME.format(lang))
        self._open_flags = 'n' if importing else 'c'
        if not os.path.exists(DB.DICT_DIR):
            if not importing:
                raise DBException(dedent(
                    """\
                    There's no "{0}" directory!
                    You have to import an dict.cc database file first.
                    See --help for information.
                    """.format(DB.DICT_DIR)))
            else:
                os.makedirs(DB.DICT_DIR)
        else:
            if os.path.exists(self.path) and importing:
                print('Will overwrite "{0}"'.format(self.path))

        self.db = None
        self._accessors = 0
        self.transcriptions = {}  # initialized on first opening

    def __enter__(self):
        if not os.path.exists(self.path):
            print('Path "{0}" does not exist, will create it.'.format(self.path))
        if self._accessors == 0:
            self.db = gdbm.open(self.path, self._open_flags)
        self._accessors += 1
        try:
            transcriptions = decode(self.db[DB.TRANSCRIPTONS_KEY])
            if transcriptions:
                self.transcriptions = dict([t.split('<=>', 1)
                                            for t in transcriptions.split('<;>')])
        except KeyError:
            pass
        return self

    def __exit__(self, type, value, traceback):
        self._accessors -= 1
        if self._accessors == 0:
            self.db.close()
            self.db = None

    def __iter__(self):
        if self.db is None:
            raise StopIteration()
        key = self.db.firstkey()
        while key is not None:
            yield decode(key), decode(self.db[key])
            key = self.db.nextkey(key)

    def __setitem__(self, key, value):
        self.db[encode(key)] = encode(value)

    def __getitem__(self, key):
        return self.get(key)

    def get(self, key, default=False):
        """
        Return the value stored in key. If key is not found return ``default``.

        :raises: :exc:`KeyError` if key is not found and ``default`` is ``False``.

        :param key: the key to lookup
        :type key: unicode
        :param default: the value to return if lookup failed
        :type default: unicode
        """
        try:
            return decode(self.db[encode(key)])
        except KeyError:
            if default is False:
                raise
            else:
                return default

    def size(self):
        """
        Return the number of entries in the db.
        """
        with self:
            return sum(1 for _ in self)

    def info(self):
        """
        Return information about the database as dictionary.
        """
        return {'Direction:': self.header(),
                'Transcriptions': ', '.join('{0} => {1}'.format(*e) for e
                                            in self.transcriptions.iteritems())}

    def header(self):
        """
        Return the language header stored in the DB or ``None`` if there is none.
        """
        with self:
            return self.get(DB.LANG_DIR_KEY, None)


class Entry(object):
    """
    An entry is the collection of all phrases and corresponding translations
    that share a key.
    """
    def __init__(self):
        self.dictionary = defaultdict(list)

    @classmethod
    def from_serialized(cls, serialized):
        """
        Construct an Entry from the serialized form stored in the db.

        :param serialized: serialized form to build from
        :type serialized: unicode
        """
        entry = cls()
        if not serialized:
            return entry
        phrase_groups = serialized.split('#<>#')
        for pg in phrase_groups:
            phrase, translations = pg.split('=<>')
            entry.dictionary[phrase] = translations.split(':<>:')

        return entry

    def add(self, phrase, translation):
        """
        Add phrase and its translation to this entry.
        """
        self.dictionary[phrase.strip()].append(translation.strip())

    def format(self, compact, wrap_width, limit):
        """
        Return the entry formatted for output.

        :param compact: flag to format results compact
        :type compact: bool
        :param wrap_width: width to wrap at
        :type wrap_width: int
        :param limit: limit to so many result phrases
        :type limit: int
        """
        if wrap_width > 0:
            wrap_ = lambda s: '\n'.join(wrap(s, width=wrap_width, subsequent_indent=5 * ' '))
        else:
            wrap_ = lambda s: s
        capped = self.items()[:limit] if limit != 0 else self.items()
        if compact:
            sep = ' / '
            items = [(phrase, wrap_(sep.join(translations)))
                     for phrase, translations in capped]
        else:
            sep = '\n    - '
            items = [(phrase, sep + sep.join(wrap_(t) for t in translations))
                     for phrase, translations in capped]

        text = '\n'.join('{0}: {1}'.format(phrase, translations)
                         for phrase, translations in items)

        return text

    def items(self):
        """
        Return the items of this entry.

        Items are sorted ascending regarding the length of the phrase.
        """
        return sorted(self.dictionary.iteritems(), key=lambda p: len(p[0]))

    def serialize(self):
        """
        Return this entry formatted suitable for storage in database.

        Different phrases are separated by '#<>#' phrases from translations by
        '=<>' and translations from each other by ':<>:'.
        """
        parts = []
        for phrase, translations in self.dictionary.iteritems():
            parts.append('{0}=<>{1}'.format(phrase, ':<>:'.join(translations)))
        return "#<>#".join(parts)


class CachingDB(DB):
    def __init__(self, lang, treshold=1000):
        """
        :param lang: language identifier, db file path is constructed with it
        :type lang: unicode
        :param treshold: count of max entries, will commit to db after reaching it
        :type treshold: int
        """
        super(CachingDB, self).__init__(lang, True)
        self.cache = {}
        self.treshold = treshold

    def __exit__(self, type, value, traceback):
        self._commit()
        super(CachingDB, self).__exit__(type, value, traceback)

    def __setitem__(self, key, value):
        if len(self.cache) > self.treshold:
            self._commit()
        self.cache[key] = value

    def __getitem__(self, key):
        try:
            return self.cache[key]
        except KeyError:
            entry = self.get(key, '') if key.startswith('__dictcc_') \
                    else Entry.from_serialized(self.get(key, ''))
            self[key] = entry
            return entry

    def _commit(self):
        for key, entry in self.cache.iteritems():
            value = entry if key.startswith('__dictcc_') else entry.serialize()
            super(CachingDB, self).__setitem__(key, value)
        self.cache.clear()

# importing data

def import_dictionary(path, transcriptions):
    """
    Import dictionary from dict.cc TSV file and return the count and directions
    of entries.

    :param path: file name of TSV to import
    :type path: str
    :param transcriptons: file name of TSV to import
    :type transcriptons: list
    """
    serialized_transcriptions = '<;>'.join('{0}<=>{1}'.format(*t)
                                           for t in transcriptions.iteritems())

    with CachingDB('a', 100) as a:
        with CachingDB('b', 1000) as b:
            with codecs.open(path, encoding=ENCODING) as f:
                head = re.match('# ([A-Z]{2})-([A-Z]{2}) vocabulary database', next(f))
                if not head:
                    raise ValueError('"{0}" is not a dict.cc database'.format(path))

                # set db headers
                a[DB.LANG_DIR_KEY] = ' => '.join(head.groups())
                a[DB.TRANSCRIPTONS_KEY] = serialized_transcriptions
                b[DB.LANG_DIR_KEY] = ' => '.join(reversed(head.groups()))
                b[DB.TRANSCRIPTONS_KEY] = serialized_transcriptions

                for line in f:
                    if line.startswith('#') or not line.strip():
                        continue
                    phrase, translation, word_type = line.split('\t')
                    for d in [a, b]:
                        key = transform_key(extract_key(phrase), transcriptions)
                        if key:
                            d[key].add(phrase, translation)
                        phrase, translation = translation, phrase

            a.db.reorganize()
            b.db.reorganize()

            return a.size(), a[DB.LANG_DIR_KEY], b.size(), b[DB.LANG_DIR_KEY]


def transform_key(key, transcriptions):
    """
    Transform the key with the given transcriptions.

    :param key: key to transform
    :type key: unicode
    :param transcriptions: maps the string to replace to the replacement
    :type transcriptions: dict
    """
    # the replacements have to happen concurrently, to prevent retranslations
    # so we build regexp to find all candidates and translate via dict lookup
    rx = re.compile('{0}'.format('|'.join(re.escape(k) for k in transcriptions)))
    return rx.sub(lambda m: transcriptions.get(m.group(0), ''), key)


def extract_key(phrase):
    """
    Extract word form phrasethat looks most important as key.

    Ignores everything that is enclosed in parenthesis and chooses the longest
    left over word.

    :param phrase: phrase to extract key from
    :type phrase: unicode
    """
    key = re.sub(r'(\([^(]*\)|\{[^{]*\}|\[[^\[]*\])', '', phrase.lower())
    if key:
        keys = [key.strip() for key in re.sub(r'[.,<>]', ' ', key).strip().split()]
        if keys:
            longest_key = sorted(keys, key=len, reverse=True)[0]
            return longest_key
    return ''


# querying

def execute_query(query):
    """
    Execute a query and return the results.

    A query may be prefixed by :r: or :f: which stands for evaluation as a
    regular expression and evaluation as a fulltext search which has both linear
    complexity (O(n); n = entries in DB.)

    :param query: the query
    :type query: unicode
    """
    qfun = {':r:': query_regexp,
            ':f:': query_fulltext}.get(query[:3], query_simple)
    query = query.lower() if query[:3] not in [':r:', ':f:'] else query[3:].lower()
    result = []
    for lang, dir_default in DB.databases:
        with DB(lang) as db:
            header = db.header() or dir_default
            query_result = qfun(query, db)
            # remove header if there are no results or only empty in this direction
            if query_result:
                result.append((header, query_result))
    return result


def query_simple(query, db):
    """
    Query the database for exact matches of key with query.

    Runs in constant complexity (O(1)).

    :param query: key to lookup
    :type query: unicode
    :param db: the database object to query
    :type db: :class:`DB`
    """
    result = db.get(transform_key(query, db.transcriptions), '')
    return [Entry.from_serialized(result)] if result else []


def query_regexp(query, db):
    """
    Query the database for matches of key with query.

    Runs in linear complexity (O(n); n = number of entries).

    :param query: regular expression for key lookup
    :type query: unicode
    :param db: the database object to query
    :type db: :class:`DB`
    """
    rx = re.compile(transform_key(query, db.transcriptions))
    return [Entry.from_serialized(v) for k, v in db if rx.match(k)]


def query_fulltext(query, db):
    """
    Query the database for matches of value with query.

    Runs in linear complexity (O(n); n = number of entries).

    :param query: regular expression for value lookup
    :type query: unicode
    :param db: the database object to query
    :type db: :class:`DB`
    """
    # FIXME: this is too naive and has too many false positives
    rx = re.compile(query, re.IGNORECASE)
    return [Entry.from_serialized(v) for k, v in db if rx.search(v)]


def interactive_mode(history, compact, width, limit):
    """
    Interactive mode for repeated queries against the database.

    See :func:`execute_query`.

    :param history: file path to read and write for history
    :type history: str
    :param compact: flag to format results compact
    :type compact: bool
    :param wrap_width: width to wrap at
    :type wrap_width: int
    :param limit: limit to so many result phrases
    :type limit: int
    """
    settings = {
        'compact': compact,
        'width': width,
        'limit': limit
    }
    try:
        import readline
        readline.read_init_file()
        try:
            readline.read_history_file(history)
        except IOError:
            print('No history available, tried "{0}"'.format(history))
    except ImportError:
        pass

    print('Welcome to the interactive mode: You can type queries here.\n'
          'Prefix your query with `:r:` to issue a regular expression query or '
          'with `:f:` for a fulltext query.\n'
          'Enter C-d (Ctrl + d) to exit.')
    try:
        while True:
            query = decode(raw_input('=> '), sys.stdin.encoding)
            if query.startswith(':set'):
                settings.update(parse_set(query))
            else:
                echo(format_query_result(execute_query(query),
                                         settings['compact'],
                                         settings['width'],
                                         settings['limit']))

    except EOFError:
        try:
            readline.write_history_file(history)
        except NameError:       # no readline imported
            pass
        print()
        print('Bye.')


def parse_set(command):
    """
    Parse a ``:set`` command and return the updated key and value as dict.
    """
    parsers = {
        'compact': parse_boolean,
        'width': int,
        'limit': int
    }
    d = {}

    _, key, value = command.split(' ', 2)
    value.strip()

    try:
        d[key] = parsers[key](value)
    except KeyError:
        print('Unknown Key "{0}"'.format(key))
    except ValueError:
        print('Could not parse value "{0}"'.format(value))

    return d


def parse_boolean(value):
    """
    Try to parse value generously as a boolean value.

    :raises: :exc:`ValueError` if value is neither truthy nor falsy
    """
    value = value.lower()
    if value in ('on', 'true', '1', 'yes'):
        return True
    elif value in ('off', 'false', '0', 'no'):
        return False
    else:
        raise ValueError()


def format_query_result(result, compact, width, limit):
    """
    Format the result of a query.

    :param result: list of header, entries pairs for entries matching query
    :type result: list
    :param compact: flag to format results compact
    :type compact: bool
    :param wrap_width: width to wrap at
    :type wrap_width: int
    :param limit: limit to so many result phrases
    :type limit: int
    """
    f = "=============== [ {0} ] ===============\n{1}"
    if not result:
        return 'No results.'

    return '\n'.join(f.format(head, '\n'.join(e.format(compact, width, limit)
                                              for e in entries))
                     for head, entries in result)


def dump_query_results(query_results):
    """
    :param result: list of header, entries pairs for entries matching query
    :type result: list
    """
    return json.dumps([{'query': query,
                        'result': [{'direction': head,
                                    'entries': [e.dictionary for e in entries]}
                                   for head, entries in r]
                    } for query, r in query_results])


def decode(s, preference=None):
    """
    Decode string with standard encoding or preference.
    """
    return s.decode(preference or ENCODING)

def encode(s, preference=None):
    """
    Encode string with standard encoding or preference.
    """
    return s.encode(preference or ENCODING)

def echo(s):
    """
    Print suitable encoded for stdout.
    """
    print(encode(s, sys.stdout.encoding))

if __name__ == '__main__':
    import argparse


    class UserExpandAction(argparse.Action):
        """Action to expand the path passed to it."""
        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, os.path.expanduser(values))

    parts = [('Import', '[-t TRANSCRIPTON [TRANSCRIPTON ...]] [-i DICTCC_FILE]'),
             ('Query', '[-w WIDTH] [-l LIMIT] [-c | -j] '
                       '[-s | -r | -f] QUERY [QUERY ...]'),
             ('Interactive', '[-H HISTFILE] [-w WIDTH] [-c]'),
             ('Information', '[--info] [-v] [-S] [-h]')]

    usage = '\n'.join('{{0:>{0}}}: %(prog)s [-d PATH] {{1}}'
                      .format(max(len(desc) for desc, _ in parts))
                      .format(desc, opts)
                      for desc, opts in parts)

    parser = argparse.ArgumentParser(add_help=False, usage='\n' + usage)

    imp = parser.add_argument_group('Database building options')
    imp.add_argument('-i', '--import', metavar='DICTCC_FILE', dest='imp',
                     help='Import dict files from dict.cc')
    imp.add_argument('-t', '--transcription', nargs='+', default=[],
                     help='Transcribe keys with arguments, '
                     'pairs of pattern and replacement')

    formatting = parser.add_argument_group('Format options')
    format_mutex = formatting.add_mutually_exclusive_group()
    format_mutex.add_argument('-c', '--compact', action='store_true',
                              help='Use compact output format')
    format_mutex.add_argument('-j', '--json', action='store_true',
                              help='JSON output format')
    formatting.add_argument('-w', '--width', default=72, type=int,
                            help='Width to wrap output at '
                            '(0 disables, defaults to %(default)s)')
    formatting.add_argument('-l', '--limit', default=0, type=int,
                            help='Limits to LIMIT result phrases '
                            '(0 disables, defaults to %(default)s)')

    misc = parser.add_argument_group('Misc options')
    misc.add_argument('-v', '--version', action='version', help='Show version',
                      version='%(prog)s {0}'.format('.'.join(__version__)))
    misc.add_argument('-S', '--size', action='store_true',
                      help='Show the number of entries in the databases')
    misc.add_argument('--info', action='store_true',
                      help='Show information about databases')
    misc.add_argument('-d', '--directory', metavar='PATH',
                      default=os.path.expanduser('~/.pdictcc'),
                      action=UserExpandAction,
                      help='Use PATH instead of "%(default)s"')
    misc.add_argument('-H', '--histfile', metavar='HISTFILE',
                      default=os.path.expanduser('~/.pdictcchistory'),
                      action=UserExpandAction,
                      help='Use HISTFILE instead of "%(default)s"')

    misc.add_argument('--debug', action='store_true',
                      help='Show debug information')
    misc.add_argument('-h', '--help', action='help',
                      help='Show this help message and exit')

    query = parser.add_argument_group('Query options')
    query_mutex = query.add_mutually_exclusive_group()
    query_mutex.add_argument('-s', '--simple', action='store_true',
                       help='Translate the word given as QUERY (default)')
    query_mutex.add_argument('-r', '--regexp', action='store_true',
                       help='Translate all the words mathing the regexp QUERY')
    query_mutex.add_argument('-f', '--fulltext', action='store_true',
                       help='Translate all sentences matching the regexp QUERY')
    parser.add_argument('query', metavar='QUERY', nargs='*',
                        help='the queries to search')

    args = parser.parse_args()

    DB.DICT_DIR = args.directory
    try:
        if args.size:
            for lang, lang_desc in DB.databases:
                with DB(lang) as db:
                    print('{0}: {1} entries'.format(db.header() or lang_desc,
                                                    db.size()))
        elif args.info:
            for lang, lang_desc in DB.databases:
                with DB(lang) as db:
                    echo('Database: {0}'.format(db.path))
                    echo('\n'.join('{0}: {1}'.format(*e) for e
                                   in db.info().iteritems()))

        elif args.imp:
            if len(args.transcription) % 2:
                raise ValueError('Transcription list has to be even numbered')

            ts = (decode(t) for t in args.transcription)
            transcriptions = dict([(x, next(ts)) for x in ts])
            path = args.imp
            echo('Importing from "{0}"'.format(path))
            info = import_dictionary(path, transcriptions)
            echo('Imported {0} ({1}) and {2} ({3}) entries'.format(*info))

        elif args.query:
            queries = (decode(q) for q in args.query)
            if args.json:
                echo(dump_query_results((q, execute_query(q))
                                        for q in queries))
            else:
                for q in queries:
                    if args.regexp:
                        q = ':r:' + q
                    elif args.fulltext:
                        q = ':f:' + q
                    echo(format_query_result(execute_query(q),
                                             args.compact, args.width,
                                             args.limit))

        else:
            interactive_mode(args.histfile, args.compact,
                             args.width, args.limit)

    except Exception as e:
        if args.debug:
            raise
        else:
            echo('Error: {0}'.format(e))
        sys.exit(1)
